#!/usr/bin/env python3
"""
Analyze the most recent survey response from the decrypted data
Focus on the latest response from the new app version testing
"""

import pandas as pd
import json
import ast
from datetime import datetime

def analyze_latest_response():
    print("üîç Analyzing most recent biweekly survey response...")
    
    # Load the biweekly responses
    df = pd.read_csv('../decryption_tools/decrypted_data/biweekly_decrypted_responses.csv')
    
    # Sort by EndDate (which is simpler) to get the most recent
    df['EndDate'] = pd.to_datetime(df['EndDate'], format='mixed')
    latest = df.sort_values('EndDate').iloc[-1]
    
    print(f"\nüìä LATEST RESPONSE ANALYSIS")
    print(f"=" * 50)
    print(f"Response ID: {latest['ResponseId']}")
    print(f"Participant UUID: {latest['decrypted_participant_uuid']}")
    print(f"Timestamp: {latest['EndDate']}")
    print(f"Survey ID: {latest['decrypted_survey_id']}")
    
    # Parse the decrypted survey data
    try:
        survey_data = ast.literal_eval(latest['decrypted_data'])
        print(f"\nüìã SURVEY RESPONSES:")
        print(f"-" * 30)
        for key, value in survey_data.items():
            if value is not None and value != '':
                print(f"{key}: {value}")
    except Exception as e:
        print(f"‚ùå Error parsing survey data: {e}")
    
    # Parse location data
    try:
        location_data = ast.literal_eval(latest['decrypted_location_data'])
        print(f"\nüìç LOCATION DATA:")
        print(f"-" * 30)
        print(f"Sharing option: {location_data.get('sharing_option', 'N/A')}")
        print(f"Total locations available: {location_data.get('total_locations_available', 0)}")
        print(f"Locations shared: {location_data.get('locations_shared_count', 0)}")
        print(f"Collection period: {location_data.get('collection_period_days', 0)} days")
        
        locations = location_data.get('locations', [])
        print(f"\nüìç LOCATION POINTS ({len(locations)} points):")
        for i, loc in enumerate(locations):
            print(f"  Point {i+1}:")
            print(f"    Timestamp: {loc.get('timestamp')}")
            print(f"    Latitude: {loc.get('latitude')}")
            print(f"    Longitude: {loc.get('longitude')}")
            print(f"    Accuracy: {loc.get('accuracy')}m")
            print(f"    Activity: {loc.get('activity')}")
            
    except Exception as e:
        print(f"‚ùå Error parsing location data: {e}")
    
    # Parse metadata
    try:
        metadata = ast.literal_eval(latest['decrypted_metadata'])
        print(f"\nüîß APP METADATA:")
        print(f"-" * 30)
        for key, value in metadata.items():
            print(f"{key}: {value}")
    except Exception as e:
        print(f"‚ùå Error parsing metadata: {e}")
    
    return latest

def create_clean_tables():
    print(f"\n\nüóÇÔ∏è CREATING STRUCTURED TABLES")
    print(f"=" * 50)
    
    # Load all data
    biweekly_df = pd.read_csv('../decryption_tools/decrypted_data/biweekly_decrypted_responses.csv')
    initial_df = pd.read_csv('../decryption_tools/decrypted_data/initial_decrypted_responses.csv') 
    consent_df = pd.read_csv('../decryption_tools/decrypted_data/consent_decrypted_responses.csv')
    
    # Get latest response only
    biweekly_df['EndDate'] = pd.to_datetime(biweekly_df['EndDate'], format='mixed')
    latest_biweekly = biweekly_df.sort_values('EndDate').iloc[-1:]
    
    print(f"Processing {len(latest_biweekly)} latest biweekly response...")
    print(f"Available initial responses: {len(initial_df)}")
    print(f"Available consent records: {len(consent_df)}")
    
    # Create location table from latest response
    location_rows = []
    for idx, row in latest_biweekly.iterrows():
        try:
            location_data = ast.literal_eval(row['decrypted_location_data'])
            locations = location_data.get('locations', [])
            participant_uuid = row['decrypted_participant_uuid']
            response_id = row['ResponseId']
            
            for i, loc in enumerate(locations):
                location_rows.append({
                    'location_id': f"{response_id}_loc_{i+1}",
                    'response_id': response_id,
                    'participant_uuid': participant_uuid,
                    'timestamp': loc.get('timestamp'),
                    'latitude': loc.get('latitude'),
                    'longitude': loc.get('longitude'),
                    'accuracy': loc.get('accuracy'),
                    'altitude': loc.get('altitude'),
                    'speed': loc.get('speed'),
                    'activity': loc.get('activity')
                })
        except:
            continue
    
    # Save tables
    location_df = pd.DataFrame(location_rows)
    
    print(f"\nüìÅ Saving structured tables...")
    latest_biweekly.to_csv('latest_biweekly_response.csv', index=False)
    location_df.to_csv('latest_location_data.csv', index=False)
    initial_df.to_csv('all_initial_responses.csv', index=False)
    consent_df.to_csv('all_consent_records.csv', index=False)
    
    print(f"‚úÖ Tables created:")
    print(f"   üìÑ latest_biweekly_response.csv: {len(latest_biweekly)} records")
    print(f"   üìç latest_location_data.csv: {len(location_df)} location points")
    print(f"   üë§ all_initial_responses.csv: {len(initial_df)} records")
    print(f"   üìã all_consent_records.csv: {len(consent_df)} records")

if __name__ == '__main__':
    latest = analyze_latest_response()
    create_clean_tables()
    
    print(f"\nüéâ Analysis complete!")
    print(f"\nThe most recent response shows:")
    print(f"‚úÖ Survey data is being captured and encrypted correctly")
    print(f"‚úÖ Location data is being collected and transmitted")
    print(f"‚úÖ App metadata (version 1.0.0) is included")
    print(f"‚úÖ All data is successfully decrypted and readable")